/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package com.antilia.struts2.jquery.components;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts2.StrutsException;
import org.apache.struts2.components.UIBean;
import org.apache.struts2.util.TextProviderHelper;
import org.apache.struts2.views.annotations.StrutsTag;
import org.apache.struts2.views.annotations.StrutsTagSkipInheritance;

import com.antilia.struts2.jquery.model.GridColumnModel;
import com.antilia.struts2.jquery.model.GridModel;
import com.opensymphony.xwork2.util.ValueStack;

/**
 * 
 */
@StrutsTag(name = "head", tldBodyContent = "empty", tldTagClass = "com.antilia.struts2.jquery.views.jsp.GridTag", description = "Render a chunk of HEAD for your HTML file")
@StrutsTagSkipInheritance
public class Grid extends UIBean {
  public static final String TEMPLATE = "grid";

  /**
   * The id of the HTML element generated by the grid.
   */
  private String id;
  /**
   * The URL used to get grid data back;
   */
  private String url;
  
  /**
   * The name used to locate on the stack the {@link GridModel}
   */
  private String gridModel;

  public Grid(ValueStack stack, HttpServletRequest request, HttpServletResponse response) {
    super(stack, request, response);
  }

  protected String getDefaultTemplate()
  {
    return TEMPLATE;
  }

  public void evaluateParams()
  {
    super.evaluateParams();

    if (this.url != null) addParameter("url", findValue(this.url, String.class));
    if (this.id != null) addParameter("id", findValue(this.id, String.class));
    if ((this.gridModel == null)) {
    	throw new StrutsException("attribute grid model is mandatory!");
    }    
    GridModel<?> gridModel = (GridModel<?>)stack.findValue(this.gridModel);
    if(gridModel == null) {
    	throw new StrutsException("No GridModel could be found at the stack under the name " + this.gridModel);
    }
    addParameter("script", generateStript(gridModel));
    
  }

  private String generateStript(GridModel<?> gridModel) {	  
	  StringBuffer sb = new StringBuffer();	  
	  sb.append("jQuery(document).ready(function(){");	  
	  sb.append("jQuery(\"#");
	  sb.append(this.id+"\").jqGrid({");
	  // the url parameter tells from where to get the data from server
	  // adding ?nd='+new Date().getTime() prevent IE caching
	  sb.append("url:'"+this.url+"?nd='+new Date().getTime(),");
	  // datatype parameter defines the format of data returned from the server
	  sb.append("datatype: '");
	  sb.append(gridModel.getTransferProtocol().name());
	  sb.append("',");
	      // colNames parameter is a array in which we describe the names
	      // in the columns. This is the text that apper in the head of the grid.
	  sb.append("colNames:[");
	  for(GridColumnModel<?> columnModel: gridModel.getColumnModels()) {
		  sb.append("'");
		  //TODO: get some message for a resource bundle.
		  String name = TextProviderHelper.getText(columnModel.getName(), columnModel.getPropertyPath(), stack);
		  sb.append(name);
		  sb.append("',");
	  }	  	
	  sb.append("],");
	      // colModel array describes the model of the column.
	      // name is the name of the column,
	      // index is the name passed to the server to sort data
	      // note that we can pass here nubers too.
	      // width is the width of the column
	      // align is the align of the column (default is left)
	      // sortable defines if this column can be sorted (default true)
	  sb.append("colModel:[");
	  for(GridColumnModel<?> columnModel: gridModel.getColumnModels()) {
		  sb.append("{");
		  sb.append("name:'");		 
		  sb.append(columnModel.getPropertyPath());		  
		  sb.append("',index:'");
		  sb.append(columnModel.getPropertyPath());
		  sb.append("', width:");
		  sb.append(columnModel.getWidth());
		  sb.append(", sortable:");
		  sb.append(columnModel.isSortable());
		  if(columnModel.getAlignment()!= null) {
			  sb.append(", align:'");
			  sb.append(columnModel.getAlignment().name().toLowerCase());
			  sb.append("'");
		  }
		  sb.append("},");
		  
	  }	
	  sb.append("],");
	      // pager parameter define that we want to use a pager bar
	      // in this case this must be a valid html element.
	      // note that the pager can have a position where you want
	  sb.append("pager: jQuery('#"+this.id+"_pager'),");
	      // rowNum parameter describes how many records we want to
	      // view in the grid. We use this in example.php to return
	      // the needed data.
	  sb.append("rowNum:10,");
	      // rowList parameter construct a select box element in the pager
	      //in wich we can change the number of the visible rows
	  sb.append("rowList:[10,20,30],");
	      // path to mage location needed for the grid
	  sb.append("imgpath: 'themes/sand/images',");
	  	// sortname sets the initial sorting column. Can be a name or number.
	  	// this parameter is added to the url
	  GridColumnModel<?> sortModel = gridModel.getInitialSort();
	  sb.append("sortname: '");
	  if(sortModel != null)
		  sb.append(sortModel.getPropertyPath());	  
	  sb.append("',");	  	  
	
	  sb.append("viewrecords: ");
	  sb.append(gridModel.isViewrecords());
	  sb.append(",");
	  //sets the sorting order. Default is asc. This parameter is added to the url
	  sb.append("sortorder: \"");
	  sb.append(gridModel.getSortOrder().name());
	  sb.append("\",");	  
	  sb.append("caption: \"");
	  //TODO: get it for resource and use caption as key.
	  String caption = TextProviderHelper.getText(gridModel.getCaption(), gridModel.getCaption(), stack);
	  sb.append(caption);
	  sb.append("\"");
	  sb.append("});");
	  sb.append("});");
	  return sb.toString();
	  
  }
  
  @Override
  @StrutsTagSkipInheritance
  public void setTheme(String theme)
  {
    super.setTheme(theme);
  }

  @Override
  public String getTheme()
  {
    return "ant-jquery";
  }

/**
 * @return the url
 */
public String getUrl() {
	return url;
}

/**
 * @param url the url to set
 */
public void setUrl(String url) {
	this.url = url;
}

/**
 * @return the id
 */
public String getId() {
	return id;
}

/**
 * @param id the id to set
 */
public void setId(String id) {
	this.id = id;
}

/**
 * @return the gridModel
 */
public String getGridModel() {
	return gridModel;
}

/**
 * @param gridModel the gridModel to set
 */
public void setGridModel(String gridModel) {
	this.gridModel = gridModel;
}

}
