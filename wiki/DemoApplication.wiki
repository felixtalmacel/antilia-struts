#summary Getting to work the demo application

= Introduction =

Let's get the demo application working!


= Installing the application =

  * Check out project *struts2-jq-antilia* and *struts2-jq-antilia-test* from SVN (see http://code.google.com/p/antilia-struts/source/checkout for details on how to do that). 
  * The demo application assume you are using eclipse as your IDE (sorry, no maven yet). 
  * There is a launcher struts-2-antilia you can use to start the demo application. This will launch a Jetty server as well as derby network server.
  * The application should be up an running... To see it browse at http://localhost:8080/struts2/.You should see something like.
http://antilia-struts.googlecode.com/svn/wiki/Demo1.jpg
  * But still we have to create the database used by the demo. For this there is a an ANT launcher called *buildDataBase2*. This will launch a DDL utils script taht wil construct the database. To insert data for the application just run the class *com.antilia.struts2.entities.InsertCountries*. *IMPORTANT*: mind that the application should be running when execute the script, so that the derby server is up an running.
  * Now if you browse at http://localhost:8080/struts2/example/AntiliaJQueryDB you should see something like: 
http://antilia-struts.googlecode.com/svn/wiki/Demo2.jpg

= The Source Code =

   * The struts file:

{{{
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
        "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
        "http://struts.apache.org/dtds/struts-2.0.dtd">

<struts>

    <package name="example" namespace="/struts2/example" extends="struts-default">

		<action name="Index" class="com.antilia.struts2.Index">
            <result>/struts2/example/Index.jsp</result>
        </action>
        
        
        <action name="AntiliaJQuery"  class="com.antilia.struts2.JQueryGridAction">            
        	<result>/struts2/example/AntiliaJQuery.jsp</result>
        </action>
        
        <action name="XMLData" method="xmlData" class="com.antilia.struts2.JQueryGridAction">            
        </action>  

		<action name="AntiliaJQueryDB"  class="com.antilia.struts2.JQueryGridDBAction">            
        	<result>/struts2/example/AntiliaJQueryDB.jsp</result>
        </action>
        
        <action name="XMLDataDB" method="xmlData" class="com.antilia.struts2.JQueryGridDBAction">            
        </action>
        
    </package>
</struts>
}}} 

   * The action class:

{{{
public class JQueryGridDBAction extends ExampleSupport {

    private static final long serialVersionUID = 1L;

	
	private GridModel<Country>  gridModel;
  
     
	public String execute() throws Exception {    	   
    	  setRequest_locale((String)ServletActionContext.getRequest().getParameter("request_locale"));
        setMessage(getText(MESSAGE));               
        innitModel();
        return SUCCESS;
    }
	
	private void innitModel() {
		gridModel = new GridModel<Country>(Country.class);
		gridModel.setCaption("Countries");
		gridModel.setAutowidth(true);
		gridModel.setShrinkToFit(false);
		gridModel.setRownumbers(true);
		gridModel.setHidegrid(false);
		gridModel.setSortOrder(SortOrder.asc);
		GridColumnModel<Country> columnModel = new GridColumnModel<Country>("name", 100);
        columnModel.setInitialSort(true);
        columnModel.setCellRenderer(new IGridCellRenderer<Country>() {
        	private static final long serialVersionUID = 1L;

			public String renderCell(Country bean, String propertyPath, int column, int row) {
        		return "<span style=\"color: red;\">"+bean.getName()+"</span>";
        	}
        });
        gridModel.addColumnModel(columnModel);
        // ID
        columnModel = new GridColumnModel<Country>("id", 100);
        columnModel.setSortable(false);
        gridModel.addColumnModel(columnModel);
        // Domain
        columnModel = new GridColumnModel<Country>("domain", 200);
        gridModel.addColumnModel(columnModel);               
	}
       
	
	public String xmlData() throws Exception {
		IPersistenceUnit persistenceUnit = DerbyPersistenceUnit.getInstance();		
		try {
			RequestContext requestContext = RequestContext.get();
			requestContext.setPersistenceUnit(persistenceUnit);		
			requestContext.setUser("test");			
			innitModel();
			ProviderNavigator<Country> navigator = new ProviderNavigator<Country>(new CountriesProvider(), gridModel);				
			navigator.renderData();
		} finally {
			RequestContext.unget();
		}
		return null;
	}	
	
	
    /**
     * Provide default valuie for Message property.
     */
    public static final String MESSAGE = "HelloWorld.message";

    /**
     * Field for Message property.
     */
    private String message;

    /**
     * 
     */
    private String request_locale;
    
    /**
     * Return Message property.
     *
     * @return Message property
     */
    public String getMessage() {
        return message;
    }

   

     /**
      * @return the gridModel
      */
      public GridModel<Country> getGridModel() {
		return gridModel;
      }

      /**
       * @param gridModel the gridModel to set
       */
       public void setGridModel(GridModel<Country> gridModel) {
	  this.gridModel = gridModel;
      }
 }
}}}