#summary Getting to work the demo application

= Introduction =

Let's get the demo application working!


= Installing the application =

  * Check out project *struts2-jq-antilia* and *struts2-jq-antilia-test* from SVN (see http://code.google.com/p/antilia-struts/source/checkout for details on how to do that). 
  * The demo application assume you are using eclipse as your IDE (sorry, no maven yet). 
  * There is a launcher struts-2-antilia you can use to start the demo application. This will launch a Jetty server as well as derby network server.
  * The application should be up an running... To see it browse at http://localhost:8080/struts2/.You should see something like.
http://antilia-struts.googlecode.com/svn/wiki/Demo1.jpg
  * But still we have to create the database used by the demo. For this there is a an ANT launcher called *buildDataBase2*. This will launch a DDL utils script taht wil construct the database. To insert data for the application just run the class *com.antilia.struts2.entities.InsertCountries*. *IMPORTANT*: mind that the application should be running when execute the script, so that the derby server is up an running.
  * Now if you browse at http://localhost:8080/struts2/example/AntiliaJQueryDB you should see something like: 
http://antilia-struts.googlecode.com/svn/wiki/Demo2.jpg

  * Try navigating the table and/or sorting the columns.

= The Source Code =

   * The struts file:

{{{
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
        "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
        "http://struts.apache.org/dtds/struts-2.0.dtd">

<struts>

    <package name="example" namespace="/struts2/example" extends="struts-default">

		<action name="Index" class="com.antilia.struts2.Index">
            <result>/struts2/example/Index.jsp</result>
        </action>
        
        
        <action name="AntiliaJQuery"  class="com.antilia.struts2.JQueryGridAction">            
        	<result>/struts2/example/AntiliaJQuery.jsp</result>
        </action>
        
        <action name="XMLData" method="xmlData" class="com.antilia.struts2.JQueryGridAction">            
        </action>  

		<action name="AntiliaJQueryDB"  class="com.antilia.struts2.JQueryGridDBAction">            
        	<result>/struts2/example/AntiliaJQueryDB.jsp</result>
        </action>
        
        <action name="XMLDataDB" method="xmlData" class="com.antilia.struts2.JQueryGridDBAction">            
        </action>
        
    </package>
</struts>
}}} 

   * The action class:

{{{
public class JQueryGridDBAction extends ExampleSupport {

    private static final long serialVersionUID = 1L;

	
	private GridModel<Country>  gridModel;
  
     
	public String execute() throws Exception {    	   
    	  setRequest_locale((String)ServletActionContext.getRequest().getParameter("request_locale"));
        setMessage(getText(MESSAGE));               
        innitModel();
        return SUCCESS;
    }
	
	private void innitModel() {
		gridModel = new GridModel<Country>(Country.class);
		gridModel.setCaption("Countries");
		gridModel.setAutowidth(true);
		gridModel.setShrinkToFit(false);
		gridModel.setRownumbers(true);
		gridModel.setHidegrid(false);
		gridModel.setSortOrder(SortOrder.asc);
		GridColumnModel<Country> columnModel = new GridColumnModel<Country>("name", 100);
        columnModel.setInitialSort(true);
        columnModel.setCellRenderer(new IGridCellRenderer<Country>() {
        	private static final long serialVersionUID = 1L;

			public String renderCell(Country bean, String propertyPath, int column, int row) {
        		return "<span style=\"color: red;\">"+bean.getName()+"</span>";
        	}
        });
        gridModel.addColumnModel(columnModel);
        // ID
        columnModel = new GridColumnModel<Country>("id", 100);
        columnModel.setSortable(false);
        gridModel.addColumnModel(columnModel);
        // Domain
        columnModel = new GridColumnModel<Country>("domain", 200);
        gridModel.addColumnModel(columnModel);               
	}
       
	
	public String xmlData() throws Exception {
		IPersistenceUnit persistenceUnit = DerbyPersistenceUnit.getInstance();		
		try {
			RequestContext requestContext = RequestContext.get();
			requestContext.setPersistenceUnit(persistenceUnit);		
			requestContext.setUser("test");			
			innitModel();
			ProviderNavigator<Country> navigator = new ProviderNavigator<Country>(new CountriesProvider(), gridModel);				
			navigator.renderData();
		} finally {
			RequestContext.unget();
		}
		return null;
	}	
	
	
    /**
     * Provide default valuie for Message property.
     */
    public static final String MESSAGE = "HelloWorld.message";

    /**
     * Field for Message property.
     */
    private String message;

    /**
     * 
     */
    private String request_locale;
    
    /**
     * Return Message property.
     *
     * @return Message property
     */
    public String getMessage() {
        return message;
    }

   

     /**
      * @return the gridModel
      */
      public GridModel<Country> getGridModel() {
		return gridModel;
      }

      /**
       * @param gridModel the gridModel to set
       */
       public void setGridModel(GridModel<Country> gridModel) {
	  this.gridModel = gridModel;
      }
 }
}}}
  * The JSP page
{{{
<%@ page contentType="text/html; charset=UTF-8" %>
<%@ taglib prefix="s" uri="/struts-tags" %>
<%@ taglib prefix="antsj" uri="/struts-ant-jquery-tags"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>	
    <title><s:text name="HelloWorld.message"/></title>
   	<antsj:head locale="es" jqgrid="true"/>   
</head>

<body>
<s:url id="url" action="Index">
</s:url>
<s:a href="%{url}">Back to examples</s:a>
       
<h2>Accessing a DATABase </h2>

<antsj:grid id="list1" url="XMLDataDB.action" gridModel="gridModel"/>
    
</body>
</html>
}}}
  * The package_en.properties file.
{{{
Countries = Countries
Country.name = Name
Country.domain = Internet domain
Country.id = ID
}}}

= Some explanations =

  * The grid is controlled via an instance of the class *GridModel* and one or more instances of *GridColumnModel* (one for each column). Each of these classes has setter methods that allows to configure the grid or the grid column, respectively.
  * This configuration class is passed into the JSP tag via the *gridModel* attribute. 
  * In this case the grid is receiving data as XML format via the method 
{{{
public String xmlData() throws Exception {
		IPersistenceUnit persistenceUnit = DerbyPersistenceUnit.getInstance();		
		try {
			RequestContext requestContext = RequestContext.get();
			requestContext.setPersistenceUnit(persistenceUnit);		
			requestContext.setUser("test");			
			innitModel();
			ProviderNavigator<Country> navigator = new ProviderNavigator<Country>(new CountriesProvider(), gridModel);				
			navigator.renderData();
		} finally {
			RequestContext.unget();
		}
		return null;
	}
}}}
 which is accessing Hibernate as back end. The XML is created by the helper class ProviderNavigator which will take care of producing the XML data needed by the tree. 
{{{
public  class ProviderNavigator<B extends Serializable> implements Serializable {

	private static final long serialVersionUID = 1L;

	private IDataProvider<B> dataProvider;
	
	private GridModel<B> gridModel;
	
	private IQuery<B> query;
	
	/**
	 * 
	 * @param dataProvider
	 * @param columnModel
	 */
	public ProviderNavigator(IDataProvider<B> dataProvider, GridModel<B> gridModel) {
		this.dataProvider = dataProvider;
		this.gridModel = gridModel;
		this.query = new Query<B>(gridModel.getBeanClass());
	}
	
	
	/**
	 * 
	 * @param request
	 * @return
	 */
	public final void renderData() throws Exception {
		configureProvider(dataProvider);
		if(this.gridModel.getTransferProtocol().equals(GridModel.TransferProtocol.xml))
			renderXML(ServletActionContext.getRequest(), ServletActionContext.getResponse());
		else {
			renderJson(ServletActionContext.getRequest(), ServletActionContext.getResponse());
		}
	}
....

}
}}}

  * Right now only XML is supported.  The ProviderNavigator delegates data retrieval to the an instance of the interface IDataProvider. This interface is a follows:
{{{
public interface IDataProvider<B extends Serializable> extends Serializable {
		
	/**
	 * Returns an Iterable over the records starting at first and ending at firt+count.
	 * 
	 * @param first
	 * @param count
	 * @return
	 */
	Iterable<? extends B> getData(IQuery<B> query);
	
	/**
	 * 
	 * @return returns the number of records.
	 */
	int getSize(IQuery<B> query); 
	
	
	/**
	 * 
	 */
	void detach();

}
}}}
  * The IQuery interface encapsulates the query needed to load the data of the table.
{{{
public interface IQuery<B extends Serializable> extends Serializable  {
	
	public static final int ALL_RESULTS = -1;
	
	/**
	 * The bean class associated with the query.
	 * 
	 * @return
	 */
	Class<B> getEntityClass();

	/**
	 * Adds a restriction.
	 * 
	 * @param filter
	 * @return
	 */
	IQuery<B> addRestriction(IRestriction filter);
	
	/**
	 * Removes a restriction.
	 * 
	 * @param propertyName
	 * @return
	 */
	IQuery<B> removeRestriction(String propertyName);
		
	/**
	 * @return Returns an {@link Iterable} over the filters.
	 */
	Iterable<IRestriction> getRestrictions(); 
	
	/**
	 * Finds the {@link IRestriction}s for a given property name.
	 * @param propertyName
	 * @return
	 */
	IRestriction findRestriction(String propertyName);
	
	/**
	 * Clear all the restrictions.
	 */
	public void clearRestrictions();
	
	/**
	 * Adds a order.
	 * @param order
	 * @return
	 */
	IQuery<B> addOrder(IOrder<B> order);
	
	/**
	 * @return Returns an {@link Iterable} over the orders.
	 */
	Iterable<IOrder<B>> getOrders();
	
	/**
	 * Returns the order for the property <code>propertyPath</code> or null if no order is found for that property.
	 * @param propertyPath
	 * @return
	 */
	IOrder<B> getOrder(String propertyPath);
	
	/**
	 * Clears any orders present on the query.
	 */
	public void clearOrders();
	
	/**
	 * Adds a projection to the query.
	 * 
	 * @param projection
	 * @return
	 */
	IQuery<B> setProjection(IProjection projection);
	
	/**
	 * Returns the projection.
	 * @return
	 */
	public IProjection getProjection();
	
	/**
	 * Sets the maximum number of results that executing the query should return.
	 * 
	 * @param maxResults
	 * @return
	 */
	public IQuery<B> setMaxResults(int maxResults);
	
	/**
	 * @return Gets the maximum number of results that executing the query should return.
	 */
	public int getMaxResults( );
	
	/**
	 * 	Sets the first result that executing the query should return.
	 * 
	 * @param firstResult
	 * @return
	 */
	public IQuery<B> setFirstResult(int firstResult);
	
	/**
	 * 
	 * @return Gets the first result that executing the query should return.
	 */
	public int getFirstResult( );

}
}}}